import { db } from "./firebase-config.js";
import { doc, setDoc, getDoc, updateDoc } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

let selectedData = {}; // Â§âÊõ¥„Åï„Çå„Åü„Çª„É´„ÅÆ„Éá„Éº„Çø„Çí‰øùÂ≠ò
let jsonData = []; // Excel„Éá„Éº„Çø„ÅÆ‰øùÊåÅ

// üìå Excel„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
document.getElementById("excelFileInput").addEventListener("change", async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: "array" });

        const sheetName = workbook.SheetNames[0]; // 1ÊûöÁõÆ„ÅÆ„Ç∑„Éº„Éà„ÇíÂèñÂæó
        const sheet = workbook.Sheets[sheetName];
        jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        displayTable(jsonData);
    };
    reader.readAsArrayBuffer(file);
});

// üìå Web„Éö„Éº„Ç∏‰∏ä„Å´„ÉÜ„Éº„Éñ„É´„ÇíÁîüÊàêÔºà„Çª„É´Á∑®ÈõÜÂèØËÉΩÔºâ
function displayTable(data) {
    const table = document.getElementById("excelTable");
    table.innerHTML = "";

    data.forEach((row, rowIndex) => {
        const tr = document.createElement("tr");

        row.forEach((cell, colIndex) => {
            const td = document.createElement("td");
            td.contentEditable = true;
            td.textContent = cell || "";

            // ‚úçÔ∏è „É¶„Éº„Ç∂„Éº„ÅåÁ∑®ÈõÜ„Åó„ÅüÂ†¥Âêà„ÄÅselectedData „Å´‰øùÂ≠ò
            td.addEventListener("input", (event) => {
                const newValue = event.target.textContent;
                selectedData[`${rowIndex}-${colIndex}`] = newValue;
            });

            tr.appendChild(td);
        });

        table.appendChild(tr);
    });
}

// üìå Firestore „Å´„Éá„Éº„Çø„Çí‰øùÂ≠òÔºàÂ±•Ê≠¥„ÇíÂê´„ÇÄÔºâ
async function saveToFirestore(cellId, newValue, user) {
    const docRef = doc(db, "excelData", "editedCells");
    const docSnap = await getDoc(docRef);
    let data = docSnap.exists() ? docSnap.data().data : {};

    data[cellId] = {
        value: newValue,
        edited_by: user,
        timestamp: new Date().toISOString()
    };

    await updateDoc(docRef, { data });
    console.log(`„Çª„É´ ${cellId} „ÅÆÂ§âÊõ¥„Çí Firestore „Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü`);
}

// Firestore „Å∏‰øùÂ≠ò„Éú„Çø„É≥
document.getElementById("saveData").addEventListener("click", async () => {
    let user = prompt("„ÅÇ„Å™„Åü„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
    if (!user) return;

    Object.entries(selectedData).forEach(([cellId, value]) => {
        saveToFirestore(cellId, value, user);
    });

    alert("Á∑®ÈõÜÂ±•Ê≠¥„Çí Firestore „Å´‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºÅ");
});

// üìå Firestore „ÅÆ„Éá„Éº„Çø„Çí Excel „Å´Êàª„Åó„Å¶„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
async function downloadExcel() {
    const docRef = doc(db, "excelData", "editedCells");
    const docSnap = await getDoc(docRef);
    if (!docSnap.exists()) {
        alert("„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì");
        return;
    }

    let data = docSnap.data().data;
    let worksheet = XLSX.utils.json_to_sheet(Object.entries(data).map(([cell, info]) => ({
        Cell: cell,
        Value: info.value,
        EditedBy: info.edited_by,
        Timestamp: info.timestamp
    })));

    let workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

    XLSX.writeFile(workbook, "edited_excel.xlsx");
}

// „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
document.getElementById("downloadExcel").addEventListener("click", downloadExcel);
